{"version":3,"sources":["components/cards/index.js","components/Navbar/index.js","components/wrapper/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["GiantsCard","props","className","alt","name","onClick","handleIncrement","id","src","image","MyNavbar","Navbar","Brand","href","Toggle","Collapse","Text","score","highScore","MyWrapper","state","giants","i","length","clicked","sort","Math","random","setState","this","map","giantsPlayers","key","React","Component","MyJumbotron","Jumbotron","fluid","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wwDAaeA,MAVf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKF,EAAMG,KAAMC,QAAS,kBAAIJ,EAAMK,gBAAgBL,EAAMM,KAAKC,IAAKP,EAAMQ,W,gBCiBxEC,MApBf,SAAkBT,GACd,OACQ,kBAACU,EAAA,EAAD,CAAQT,UAAU,oCACd,kBAACS,EAAA,EAAOC,MAAR,CAAcC,KAAK,KAAnB,eACA,kBAACF,EAAA,EAAOG,OAAR,MACA,kBAACH,EAAA,EAAOI,SAAR,CAAiBb,UAAU,sBACvB,kBAACS,EAAA,EAAOK,KAAR,kCAIJ,kBAACL,EAAA,EAAOI,SAAR,CAAiBb,UAAU,uBACvB,kBAACS,EAAA,EAAOK,KAAR,eACYf,EAAMgB,MADlB,iBACuChB,EAAMiB,cC4ClDC,E,4MArDbC,MAAQ,CACNC,SACAJ,MAAO,EACPC,UAAW,G,EAIbZ,gBAAkB,SAACC,GAIjB,IAHA,IAAIc,EAAS,EAAKD,MAAMC,OACpBJ,EAAQ,EAAKG,MAAMH,MACnBC,EAAY,EAAKE,MAAMF,UAClBI,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAC9BD,EAAOC,GAAGf,KAAOA,KACO,IAAtBc,EAAOC,GAAGE,SACXP,IACAI,EAAOC,GAAGE,SAAU,IAGjBP,EAAQC,IACTA,EAAYD,GAEdA,EAAQ,IAKd,EAAKG,MAAMC,OAAOI,MAAK,kBAAMC,KAAKC,SAAW,MAC7C,EAAKC,SAAS,CAAEX,MAAOA,EAAOC,UAAWA,EAAWG,OAAQA,K,uDAIpD,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,CACEJ,MAASY,KAAKT,MAAMH,MACpBC,UAAaW,KAAKT,MAAMF,YAE1B,yBAAKhB,UAAU,aACV2B,KAAKT,MAAMC,OAAOS,KAAI,SAAAC,GAAa,OAClC,kBAAC,EAAD,CACAtB,MAAOsB,EAActB,MACrBF,GAAIwB,EAAcxB,GAClByB,IAAKD,EAAcxB,GACnBD,gBAAiB,EAAKA,2B,GA7CZ2B,IAAMC,W,wBCWfC,MAbf,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACI,2CACA,0GCSDC,E,uKATX,OACE,yBAAKrC,UAAU,OACf,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANYgC,aCMEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc3ece23.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction GiantsCard(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} onClick={()=>props.handleIncrement(props.id)} src={props.image} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GiantsCard;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Navbar } from 'react-bootstrap';\r\n\r\nfunction MyNavbar(props) {\r\n    return (      \r\n            <Navbar className=\"bg-light justify-content-between\">\r\n                <Navbar.Brand href=\"/\">Clicky-Game</Navbar.Brand>\r\n                <Navbar.Toggle />\r\n                <Navbar.Collapse className=\"text-center strong\">\r\n                    <Navbar.Text>\r\n                        Click an image to begin!\r\n              </Navbar.Text>\r\n                </Navbar.Collapse>\r\n                <Navbar.Collapse className=\"justify-content-end\">\r\n                    <Navbar.Text>\r\n                        Score: {props.score} | Top Score: {props.highScore}\r\n                    </Navbar.Text>\r\n                </Navbar.Collapse>\r\n            </Navbar>  \r\n    );    \r\n  \r\n}   \r\n\r\nexport default MyNavbar;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport giants from \"./giants.json\";\r\nimport GiantsCard from \"../cards\";\r\nimport MyNavbar from \"../Navbar\";\r\n\r\nclass MyWrapper extends React.Component {\r\n  state = {\r\n    giants,\r\n    score: 0,\r\n    highScore: 0,\r\n  };\r\n\r\n\r\n  handleIncrement = (id) => {\r\n    var giants = this.state.giants;\r\n    var score = this.state.score;\r\n    var highScore = this.state.highScore;\r\n    for (let i = 0; i < giants.length; i++) {\r\n      if(giants[i].id === id) {\r\n        if(giants[i].clicked === false) {\r\n          score ++ \r\n          giants[i].clicked = true;\r\n        }else {\r\n          //transfer score to high score \r\n          if(score > highScore) {\r\n            highScore = score\r\n          }\r\n          score = 0\r\n        }\r\n      }\r\n    }\r\n    //shuffle cards on click\r\n    this.state.giants.sort(() => Math.random() - .5)\r\n    this.setState({ score: score, highScore: highScore, giants: giants, });\r\n\r\n  };\r\n\r\n  render() {\r\n    return ( \r\n      <div>\r\n        <MyNavbar \r\n          score = {this.state.score}\r\n          highScore = {this.state.highScore}\r\n        />\r\n        <div className=\"container\">\r\n            {this.state.giants.map(giantsPlayers => (\r\n              <GiantsCard\r\n              image={giantsPlayers.image}\r\n              id={giantsPlayers.id}\r\n              key={giantsPlayers.id}\r\n              handleIncrement={this.handleIncrement}\r\n            />\r\n            ))}\r\n        </div>\r\n      </div>  \r\n    )\r\n  }\r\n}\r\n\r\nexport default MyWrapper;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\nimport {Jumbotron, Container } from 'react-bootstrap';\r\n\r\nfunction MyJumbotron() {\r\n    return (\r\n        <Jumbotron fluid>\r\n            <Container>\r\n                <h1>Clicky Game</h1>\r\n                <p>\r\n                    Click on an image to earn points, but don't click on any more than once!\r\n          </p>\r\n            </Container>\r\n      </Jumbotron>\r\n    );\r\n}\r\n\r\nexport default MyJumbotron;","import React, {Component} from 'react';\nimport './App.css';\nimport MyWrapper from \"./components/wrapper\";\nimport MyJumbotron from \"./components/Jumbotron\";\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n      <MyJumbotron />\n      <MyWrapper />  \n      </div>\n    );\n  }\n};    \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//work online only\nserviceWorker.unregister();\n"],"sourceRoot":""}